package com.alisovenko.leetcode;

/**
 * @author alisovenko 28.01.15
 */
public class DecodeWaysDpTopBottom {
    public int numDecodings(String s) {
        if (s.length() == 0) {
            return 0;
        }
        return numberOfWays(s, s.length() - 1, new int[s.length()]);
    }

    private int numberOfWays(String s, int idx, int[] cache) {
        if (idx < 0) {
            return 1;
        }
        if (cache[idx] > 0) {
            return cache[idx];
        }
        if (idx == 0) {
            if (isDecodable(s.charAt(0))) {
                cache[0] = 1;
                return 1;
            }
            cache[0] = 0;
            return 0;
        }
        int res = 0;
        if (isDecodable(s.substring(idx - 1, idx + 1))) {
            res += numberOfWays(s, idx - 2, cache);
        }
        if (isDecodable(s.charAt(idx))) {
            res += numberOfWays(s, idx - 1, cache);
        }
        cache[idx] = res;
        return res;
    }

    private boolean isDecodable(char c) {
        return '1' <= c && c <= '9';
    }
    private boolean isDecodable(String c) {
        return c.compareTo("10") >= 0 && c.compareTo("26") <= 0;
    }

    public static void main(String[] args) {
        System.out.println(new DecodeWaysDpTopBottom().numDecodings("101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"));
        System.out.println(new DecodeWaysDpTopBottom().numDecodings("12"));
        System.out.println(new DecodeWaysDpTopBottom().numDecodings("1234"));
    }
}
