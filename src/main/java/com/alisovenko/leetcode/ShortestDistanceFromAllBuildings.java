package com.alisovenko.leetcode;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;

import static java.util.Map.*;
import static java.util.AbstractMap.*;

/**
 * @author alisovenko
 *         1/23/16.
 */
public class ShortestDistanceFromAllBuildings {
    public int shortestDistance(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return -1;
        }
        int distance = Integer.MAX_VALUE;
        int x = 0, y = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] != 1 && grid[i][j] != 2) {
                    int d = bfs(grid, i, j);
                    if (d < distance) {
                        distance = d;
                        x = i;
                        y = j;
                    }
                }
            }
        }
        System.out.printf("x: %s, y: %s \n", x, y);
        return distance == Integer.MAX_VALUE ? -1 : distance;
    }

    private int bfs(int[][] grid, int i, int j) {
        LinkedList<Entry<Integer, Integer>> queue = new LinkedList<>();
        LinkedList<Integer> distances = new LinkedList<>();
        Set<Entry<Integer, Integer>> visited = new HashSet<>();

        queue.addLast(new SimpleEntry(i, j));
        distances.addLast(0);
        visited.add(new SimpleEntry(i, j));

        int distance = 0;
        while (queue.size() > 0) {
            Entry<Integer, Integer> n = queue.pollFirst();
            int x = n.getKey();
            int y = n.getValue();
            int d = distances.pollFirst();

            if (grid[x][y] == 1) {
                distance += d;
            } else if (grid[x][y] != 2) {
                if (x > 0) enqueue(queue, distances, visited, x - 1, y, d + 1);
                if (x < grid.length - 1) enqueue(queue, distances, visited, x + 1, y, d + 1);
                if (y > 0) enqueue(queue, distances, visited, x, y - 1, d + 1);
                if (y < grid[0].length - 1) enqueue(queue, distances, visited, x, y + 1, d + 1);
            }
        }
        return distance;
    }

    private void enqueue(LinkedList<Entry<Integer, Integer>> queue, LinkedList<Integer> distances, Set<Entry<Integer, Integer>> visited, int i, int y, int d) {
        SimpleEntry<Integer, Integer> e = new SimpleEntry<>(i, y);
        if (!visited.contains(e)) {
            queue.add(e);
            distances.add(d);
            visited.add(e);
        }
    }

    public static void main(String[] args) {
//        int[][] grid = new int[][]{{1, 0, 2, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 1, 0, 0}};
//        int[][] grid = new int[][]{{0,0,0,0,0,2,0,0,2,0,0,0,2,0,0,0,2,0,0,2,2,2,0,0,0,0,2,0,2,0,2,0,2,0,1,0,0,2,0,0},{2,1,1,0,0,0,0,0,0,2,2,0,0,2,0,2,2,2,0,0,2,0,0,2,0,0,1,2,1,2,0,0,0,2,0,2,0,0,2,0},{0,0,2,0,1,0,2,0,2,0,2,0,0,0,0,2,2,2,2,2,1,2,0,2,0,2,0,2,0,2,2,0,0,2,1,0,2,0,0,0},{2,2,0,2,0,0,0,1,0,2,0,2,0,0,2,1,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2},{0,0,0,2,1,0,0,0,2,0,2,2,2,0,0,2,0,2,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,2,2,0,0,2,0},{0,1,0,2,2,0,0,1,0,0,0,0,0,0,2,2,0,2,2,0,0,0,0,2,0,0,2,0,0,0,2,0,2,0,0,2,0,0,0,0},{2,2,2,0,0,0,0,1,0,0,2,2,2,1,2,2,2,2,0,2,0,1,0,0,2,2,2,0,0,0,0,2,2,0,0,0,0,0,2,0},{2,0,2,2,2,0,0,0,0,0,2,2,2,0,2,2,0,2,2,2,0,0,0,0,0,0,2,2,0,0,0,2,2,0,0,0,0,0,2,0},{0,0,0,2,0,0,0,0,0,0,2,0,2,0,0,2,0,0,2,2,2,0,0,0,2,0,0,0,0,2,2,0,2,2,2,1,0,0,0,0},{0,0,0,2,0,0,2,2,0,0,2,2,0,0,0,0,2,0,0,1,0,0,0,0,0,1,0,0,2,1,2,0,0,0,0,0,2,0,2,0},{2,2,2,2,0,2,0,2,2,2,2,0,2,0,0,0,2,2,0,2,0,2,2,0,2,0,0,0,0,0,0,0,0,0,2,0,0,2,0,2},{2,0,2,0,0,0,2,2,1,2,0,0,2,2,0,2,2,2,0,2,2,2,0,0,0,2,0,0,2,2,2,2,0,2,2,0,0,0,0,2},{0,2,2,2,0,0,2,2,2,2,0,0,0,0,1,2,2,0,2,0,2,0,1,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2},{0,0,0,0,2,0,0,0,0,2,1,0,0,0,0,2,0,0,2,0,0,2,2,0,0,2,0,0,2,0,0,0,0,2,0,2,0,0,0,0},{0,2,2,1,1,2,0,2,0,0,0,2,0,0,0,2,0,0,0,2,2,0,0,0,2,0,1,0,0,2,0,0,0,0,0,2,2,2,1,2},{0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,2,0},{0,0,0,2,2,0,2,0,2,0,2,0,1,0,2,1,0,0,0,0,0,0,0,2,2,2,0,0,0,2,0,0,2,0,0,0,0,0,2,2},{0,2,0,2,2,0,0,0,2,0,2,2,0,2,2,2,0,0,0,2,0,0,2,1,0,0,0,0,0,0,2,2,0,0,2,2,2,0,2,0}};
        int[][] grid = new int[][]{{2,2,0,1,0,0,0,2,2,2,2,2,0,0,2,0,0,1,0,2,0,0,2,0,2,0,0,0,2,0,2,2,2,0,0},{0,0,0,0,0,2,0,2,2,0,0,0,0,2,0,0,1,0,0,1,1,2,0,0,0,2,0,0,0,2,0,2,2,2,0},{0,2,2,0,0,2,0,0,0,0,0,1,0,2,2,0,2,2,1,0,0,0,0,0,1,2,0,0,0,0,1,2,0,0,2},{0,2,0,0,0,2,0,2,0,2,0,0,2,0,2,2,2,0,2,2,0,0,2,0,0,0,0,2,2,2,0,2,0,0,2},{0,2,2,0,2,2,0,0,2,0,2,0,0,0,0,2,2,0,0,0,0,0,2,2,0,2,2,2,0,0,0,2,0,0,2},{0,0,0,0,2,0,0,2,0,0,0,0,2,2,2,0,2,0,2,0,2,1,0,0,0,2,0,0,0,0,2,0,0,2,0},{0,2,0,0,0,0,0,2,2,0,0,0,1,0,2,0,2,0,2,0,2,0,0,0,0,2,2,0,0,0,0,0,2,0,0},{0,2,2,0,2,0,0,0,0,2,0,0,0,0,2,0,2,2,0,0,0,0,2,0,0,2,0,2,0,0,0,1,0,0,2},{2,0,2,0,2,0,2,0,2,2,0,0,0,2,0,0,0,0,0,0,0,2,1,1,2,0,2,0,2,0,0,0,0,0,0},{2,0,0,0,2,2,2,2,2,1,0,0,2,2,2,2,2,1,0,0,2,0,0,2,0,0,0,0,0,2,2,0,0,0,0},{0,0,2,2,0,2,2,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0,2,0,0,0,0,2,0,2,1,2},{0,2,2,0,0,0,2,0,2,2,0,0,0,0,2,0,0,2,0,0,0,2,2,2,2,0,0,0,2,0,0,2,0,0,2},{0,0,0,0,2,0,2,0,2,0,0,0,2,2,0,0,0,0,2,0,0,0,2,2,2,0,2,0,2,0,1,0,0,2,0},{2,0,0,0,2,1,0,0,0,0,0,0,0,2,1,0,0,0,1,0,0,0,0,2,0,0,2,2,2,2,0,2,0,0,2},{1,0,0,2,0,0,2,0,2,0,2,2,0,0,2,0,2,0,2,0,2,0,0,0,2,0,0,2,0,2,0,0,2,0,2},{0,2,0,2,2,2,2,1,1,2,0,2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,0,0,1,0,0,0,0,0,2},{2,0,0,0,0,2,0,0,0,2,1,0,1,2,0,2,2,0,2,2,0,2,0,0,2,2,2,2,0,0,0,0,2,0,0},{0,0,0,0,0,2,2,2,0,2,2,0,2,1,0,2,0,2,0,2,0,0,0,0,1,2,0,2,0,0,2,0,0,0,2},{2,0,0,2,2,2,0,0,2,2,2,2,0,2,0,2,2,0,0,0,2,0,2,2,0,2,2,2,0,2,2,2,0,0,0},{0,0,0,0,1,0,0,2,0,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,2,2,0,2,0,0},{2,0,2,0,1,0,0,2,0,0,0,2,2,2,0,0,0,0,0,2,0,0,1,0,2,0,0,2,2,1,2,2,2,2,0},{2,0,2,0,0,1,0,0,0,2,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,1,0},{2,0,2,2,0,2,2,0,2,2,2,0,2,1,0,0,2,0,0,2,0,0,0,2,2,0,2,0,2,2,2,0,0,0,2},{0,2,2,0,0,0,0,2,0,0,0,0,2,2,1,2,0,2,2,0,0,0,2,2,2,0,0,0,0,0,1,0,2,2,0},{0,0,0,2,2,2,0,2,0,0,2,0,0,0,0,2,2,2,2,0,2,2,2,0,2,0,0,0,0,0,0,2,0,0,2},{2,0,1,2,1,2,0,0,2,0,2,1,0,0,0,0,2,0,0,0,2,0,0,1,2,1,0,0,2,0,0,0,2,0,2},{0,0,0,0,0,2,0,2,0,0,0,2,2,0,1,0,0,1,2,0,0,0,2,2,2,0,0,0,0,2,0,0,0,0,0}};
        System.out.println(new ShortestDistanceFromAllBuildings().shortestDistance(grid));
    }
}
